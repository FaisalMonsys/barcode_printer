[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Item",
  "enabled": 1,
  "modified": "2025-09-08 18:56:41.541097",
  "module": null,
  "name": "Barcode Preview",
  "script": "frappe.ui.form.on('Item', {\n    refresh(frm) {\n        render_barcodes_preview(frm);\n        attach_live_barcode_listeners(frm);\n    },\n    barcodes_add(frm) {\n        render_barcodes_preview(frm);\n        attach_live_barcode_listeners(frm);\n    },\n    barcodes_on_form_rendered(frm) {\n        render_barcodes_preview(frm);\n        attach_live_barcode_listeners(frm);\n    }\n});\n\nfrappe.ui.form.on('Barcodes', {\n    barcode(frm, cdt, cdn) {\n        // Fires on blur/tab-out as fallback\n        render_barcodes_preview(frm);\n    }\n});\n\nfunction loadJsBarcode(callback) {\n    if (window.JsBarcode) {\n        callback();\n        return;\n    }\n    const src = 'https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js';\n    let s = document.createElement('script');\n    s.type = 'text/javascript';\n    s.src = src;\n    s.onload = callback;\n    s.onerror = () => {\n        console.error(\"❌ Failed to load JsBarcode\");\n    };\n    document.head.appendChild(s);\n}\n\n// Attach realtime keyup listener to barcode inputs\nfunction attach_live_barcode_listeners(frm) {\n    setTimeout(() => {\n        frm.fields_dict[\"barcodes\"].grid.grid_rows.forEach(row => {\n            let $input = $(row.row).find('[data-fieldname=\"barcode\"] input');\n            if ($input && !$input.data(\"barcode-listener\")) {\n                $input.on(\"keyup\", () => {\n                    render_barcodes_preview(frm);\n                });\n                $input.data(\"barcode-listener\", true);\n            }\n        });\n    }, 300);\n}\n\nfunction render_barcodes_preview(frm) {\n    if (!frm.fields_dict || !frm.fields_dict['custom_barcode_preview']) {\n        console.warn(\"⚠️ HTML field custom_barcode_preview not found in Item doctype\");\n        return;\n    }\n\n    const wrapper = frm.fields_dict['custom_barcode_preview'].$wrapper;\n    wrapper.empty();\n\n    if (!frm.doc.barcodes || frm.doc.barcodes.length === 0) {\n        wrapper.append('<div style=\"color:#666;font-style:italic\">⚠️ No barcodes found</div>');\n        return;\n    }\n\n    loadJsBarcode(() => {\n        frm.doc.barcodes.forEach((row, index) => {\n            if (!row.barcode) return;\n\n            const itemName = frm.doc.item_name || \"Unnamed Item\";\n            const itemPrice = frm.doc.standard_rate || frm.doc.price || \"0.00\";\n\n            const svgId = 'barcode_svg_' + index;\n\n            // Container\n            const $container = $(`\n                <div id=\"barcode_clickable_${index}\" style=\"margin:20px 0; padding:10px; border:1px solid #ddd; border-radius:6px; text-align:center; cursor:pointer;\">\n                    <div style=\"font-weight:bold; font-size:16px;\">${itemName}</div>\n                    <svg id=\"${svgId}\" style=\"display:block; margin:6px auto;\"></svg>\n                    <div style=\"font-size:14px; margin-top:4px;\">${row.barcode}</div>\n                    <div style=\"font-size:16px; font-weight:bold; margin-top:4px;\">BDT. ${parseFloat(itemPrice).toFixed(2)}</div>\n                    <div style=\"font-size:12px; color:grey; margin-top:4px;\">Click to Print</div>\n                </div>\n            `);\n\n            wrapper.append($container);\n\n            // Generate barcode SVG\n            try {\n                let maxBarWidth = 2;\n                let calculatedWidth = Math.min((280 / row.barcode.length), maxBarWidth);\n\n                JsBarcode(`#${svgId}`, String(row.barcode), {\n                    format: \"CODE128\",\n                    width: calculatedWidth,\n                    height: 60,\n                    displayValue: false,\n                    margin: 10\n                });\n            } catch (err) {\n                console.error(\"❌ JsBarcode error for row \" + index, err);\n                $container.append('<div style=\"color:red\">❌ Error generating barcode</div>');\n            }\n\n            // Attach print click\n            document.getElementById(`barcode_clickable_${index}`).onclick = () => {\n                let copies = parseInt(prompt(\"How many copies do you want to print?\", \"1\"));\n                if (!isNaN(copies) && copies > 0) {\n                    print_to_zebra(frm, row.barcode, itemName, itemPrice, copies);\n                } else {\n                    frappe.msgprint(\"⚠️ Invalid number of copies.\");\n                }\n            };\n        });\n    });\n}\n\n// ------------------ ZPL Printing ------------------\nfunction print_to_zebra(frm, barcode, itemName, itemPrice, copies = 1) {\n    frappe.ui.form.qz_connect()\n        .then(() => qz.printers.find(\"Zebra_Technologies_ZTC_ZD230-203dpi_ZPL\"))\n        .then(printer => {\n            if (!printer) throw new Error(\"Zebra printer not found!\");\n\n            let zpl = `\n^XA\n^CI28\n^PW320\n^LL200\n^LH0,20\n^SD15\n\n^FO120,20^A0N,18,20^FD${itemName}^FS\n^FO110,50^BY2,3,50^BEN,50,Y,N^FD${barcode}^FS\n^FO110,130^A0N,25,32^FDBDT. ${parseFloat(itemPrice).toFixed(2)}^FS\n\n^XZ\n`;\n\n            let config = qz.configs.create(printer, {\n                forceRaw: true,\n                density: 203,\n                size: { width: 3, height: 2, units: \"in\" },\n                margins: 0\n            });\n\n            // Repeat ZPL based on copies\n            let data = [];\n            for (let i = 0; i < copies; i++) {\n                data.push({ type: \"raw\", format: \"command\", flavor: \"plain\", data: zpl });\n            }\n\n            return qz.print(config, data);\n        })\n        .then(() => frappe.show_alert({ message: `✅ ${copies} label(s) sent to Zebra!`, indicator: \"green\" }))\n        .catch(err => frappe.msgprint(\"QZ Print Error: \" + err));\n}\n",
  "view": "Form"
 }
]